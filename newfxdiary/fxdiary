<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>ÌôòÏ∞®Ïùµ Îã§Ïù¥Ïñ¥Î¶¨</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <style>
        /* --- Í∏∞Ï°¥ CSSÎäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ --- */
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap');
        :root {
          --primary-color: #3182F6;
          --background-color: #F2F4F6;
          --card-background-color: #FFFFFF;
          --text-color: #333D4B;
          --subtext-color: #8B95A1;
          --border-color: #E5E8EB;
          --success-color: #2E8B57;
          --danger-color: #D94242;
        }
        body {
          font-family: 'Noto Sans KR', 'Apple SD Gothic Neo', sans-serif;
          background-color: var(--background-color);
          color: var(--text-color);
          margin: 0;
          padding: 16px;
          font-size: 14px;
          -webkit-font-smoothing: antialiased;
        }
        .card { background-color: var(--card-background-color); border-radius: 16px; padding: 20px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); margin-bottom: 16px; }
        .header-row { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; gap: 16px; }
        h2 { font-size: 16px; font-weight: 700; margin: 0; color: var(--primary-color); flex-shrink: 0; }
        .tools { display: flex; gap: 8px; flex-shrink: 0; }
        .tools button, .tools label { font-size: 13px; border-radius: 8px; border: 1px solid var(--border-color); background-color: #F9FAFB; color: #4E5968; padding: 8px 12px; cursor: pointer; font-weight: 500; text-align: center; white-space: nowrap; }
        .tools input[type="file"] { display: none; }
        .input-section { display: flex; flex-direction: column; gap: 8px; }
        .input-row { display: flex; gap: 8px; }
        .input-section input { flex: 1 1 auto; font-size: 14px; padding: 10px 12px; border: 1px solid var(--border-color); border-radius: 8px; background-color: #F9FAFB; min-width: 0; }
        .input-section input[type="date"] { flex-grow: 2; }
        .input-section input:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 0 2px rgba(49, 130, 246, 0.2); }
        .input-section .submit-btn { flex-grow: 1; border: none; background-color: var(--primary-color); color: white; font-weight: 700; cursor: pointer; }
        .tab-section { display: flex; gap: 4px; background-color: #E9ECEF; border-radius: 8px; padding: 4px; }
        .tab-section button { flex: 1; padding: 8px 0; background-color: transparent; border: none; font-size: 14px; border-radius: 6px; color: var(--subtext-color); font-weight: 500; cursor: pointer; transition: background-color 0.2s, color 0.2s; }
        .tab-section button.active { background-color: var(--card-background-color); color: var(--primary-color); font-weight: 700; box-shadow: 0 1px 3px rgba(0,0,0,0.05); }
        .date-filter { display:flex; gap: 6px; align-items: center; padding-top: 16px; }
        .date-filter input[type="date"] { flex: 1 1 auto; min-width: 90px; border:1px solid #d3d8dd; padding: 6px; border-radius: 6px; font-size: 13px;}
        .date-filter button { flex-shrink: 0; padding: 7px 10px; border-radius: 6px; border: none; font-size: 13px; cursor: pointer; white-space: nowrap;}
        .date-filter .btn-search { background: var(--primary-color); color: white;}
        .date-filter .btn-reset { background: #E9ECEF; color:var(--subtext-color);}
        .summary { font-size: 15px; font-weight: 500; padding: 16px; background-color: #F0F6FF; color: #194583; border-radius: 12px; text-align: center; margin-top: 16px; }
        .table-container { width: 100%; }
        .result-table { width: 100%; border-collapse: collapse; background: white; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.05); table-layout: fixed; }
        .result-table th, .result-table td { text-align: center; padding: 12px 4px; border-bottom: 1px solid var(--border-color); font-size: 12px; vertical-align: middle; }
        .result-table thead { background-color: #F9FAFB; }
        .result-table th { color: var(--subtext-color); font-weight: 500; padding: 10px 4px; }
        .result-table tr:last-child td { border-bottom: none; }
        .btn-sm { background: none; border: 1px solid var(--border-color); border-radius: 6px; padding: 4px 8px; font-size: 11px; cursor: pointer; min-width: 45px; white-space: nowrap; }
        .btn-detail { color: var(--primary-color); }
        .btn-delete { color: var(--danger-color); font-weight: 700; width: 100%; padding: 10px; margin-top: 10px; }
        .status { font-size: 11px; font-weight: 700; padding: 4px 8px; border-radius: 16px; display: inline-block; white-space: nowrap; }
        .status-ing { background-color: #FFF8E5; color: #D97706; }
        .status-done { background-color: #E6F8EA; color: #14AD5E; }
        .profit-plus { color: var(--danger-color); }
        .profit-minus { color: var(--primary-color); }
        .profit-neutral { color: var(--subtext-color); }
        .details-content { display: none; background-color: #F9FAFB; padding: 16px; }
        .details-content.show { display: table-cell; }
        .detail-grid { display: grid; grid-template-columns: auto 1fr auto 1fr; gap: 8px 16px; align-items: center; font-size: 13px; }
        .detail-grid strong { color: var(--subtext-color); font-weight: 500; }
        .sub-table { margin-top: 16px; border-top: 1px solid var(--border-color); padding-top: 16px; }
        .sub-table table { width: 100%; border-collapse: collapse; font-size: 13px; }
        .sub-table th, .sub-table td { text-align: center; padding: 8px 4px; border-bottom: 1px solid var(--border-color); }
        .sub-table th { background-color: #F3F4F6; font-weight: 500; }
        .sub-table input { width: 95%; box-sizing: border-box; text-align: center; border: 1px solid #D1D5DB; border-radius: 4px; padding: 4px; }
        .del-partial-btn { background: none; border: none; cursor: pointer; font-size: 16px; }
        .add-partial-btn { width: 100%; background: #F3F4F6; border: 1px solid #D1D5DB; border-radius: 6px; padding: 6px; cursor: pointer; font-weight: 500; }
        
        /* --- üëá Î°úÍ∑∏Ïù∏ Í∏∞Îä•Ïóê ÌïÑÏöîÌïú ÏÉà CSS Ïä§ÌÉÄÏùº --- */
        #auth-status {
          margin-left: auto;
          display: flex;
          align-items: center;
          gap: 12px;
          font-size: 13px;
        }
        #auth-status button {
          font-size: 13px;
          border-radius: 8px;
          border: 1px solid var(--primary-color);
          background-color: var(--primary-color);
          color: white;
          padding: 8px 12px;
          cursor: pointer;
          font-weight: 500;
        }
        #logout-btn {
            background-color: #F9FAFB;
            color: #4E5968;
            border-color: var(--border-color);
        }
        #user-email { font-weight: 500; }

        .modal-overlay {
          position: fixed;
          top: 0; left: 0;
          width: 100%; height: 100%;
          background-color: rgba(0,0,0,0.5);
          display: none; /* JSÎ°ú Ïª®Ìä∏Î°§ */
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }
        .modal-content {
          background: white;
          padding: 24px;
          border-radius: 16px;
          width: 90%;
          max-width: 380px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        .modal-content h3 {
          margin-top: 0;
          margin-bottom: 16px;
          text-align: center;
          font-size: 18px;
        }
        .modal-input {
          width: 100%;
          padding: 12px;
          border: 1px solid var(--border-color);
          border-radius: 8px;
          margin-bottom: 12px;
          box-sizing: border-box;
          font-size: 15px;
        }
        .modal-buttons {
          display: flex;
          gap: 10px;
          margin-top: 8px;
        }
        .modal-buttons button {
          flex: 1;
          padding: 12px;
          border-radius: 8px;
          border: none;
          font-size: 15px;
          font-weight: 700;
          cursor: pointer;
        }
        #modal-login-btn {
          background-color: var(--primary-color);
          color: white;
        }
        #modal-signup-btn {
          background-color: #E9ECEF;
          color: var(--subtext-color);
        }
        #modal-close-btn {
          position: absolute;
          top: 10px;
          right: 15px;
          background: none;
          border: none;
          font-size: 24px;
          cursor: pointer;
          color: var(--subtext-color);
        }
        #modal-error {
            color: var(--danger-color);
            font-size: 12px;
            text-align: center;
            margin-top: 16px;
            min-height: 18px;
        }
    </style>
</head>
<body>

<div id="auth-status" class="header-row">
    <button id="login-btn" onclick="openLoginModal()">Î°úÍ∑∏Ïù∏</button>
    <div id="user-info" style="display: none;">
        <span id="user-email"></span>Îãò
        <button id="logout-btn">Î°úÍ∑∏ÏïÑÏõÉ</button>
    </div>
</div>

<main id="app-content" style="display: none;">
    <div class="wrap">
        <div class="card">
            <div class="header-row">
                <h2>ÌôòÏ∞®Ïùµ Îã§Ïù¥Ïñ¥Î¶¨ üí∏</h2>
                <div class="tools">
                    <button onclick="exportCSV()">ÏóëÏÖÄ</button>
                    <button onclick="exportData()">Î∞±ÏóÖ</button>
                    <label>Î∂àÎü¨Ïò§Í∏∞<input type="file" id="importFile" accept=".json" onchange="importData(event)"></label>
                </div>
            </div>
            <div class="input-section">
                <div class="input-row">
                    <input type="number" id="money" placeholder="ÌôòÏ†ÑÍ∏àÏï°(Ïõê)" required>
                    <input type="number" id="rate_in" placeholder="ÌôòÏ†ÑÌôòÏú®" required step="any">
                    <input type="number" id="interest" placeholder="Ïù¥ÏûêÏú®(%)" step="any">
                </div>
                <div class="input-row">
                    <input type="date" id="date_in" title="ÌôòÏ†ÑÎÇ†Ïßú(ÏóÜÏúºÎ©¥ Ïò§Îäò)">
                    <button type="button" class="submit-btn" onclick="addRow()">Í∏∞Î°ù</button>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="tab-section">
                <button onclick="showTab('all')" class="active">Ï†ÑÏ≤¥</button>
                <button onclick="showTab('ing')">ÏßÑÌñâÏ§ë</button>
                <button onclick="showTab('done')">ÏôÑÎ£å</button>
            </div>
            <div class="date-filter">
                <input type="date" id="start-date">
                <span>~</span>
                <input type="date" id="end-date">
                <button onclick="renderTable()" class="btn-search">Ï°∞Ìöå</button>
                <button onclick="resetDateFilter()" class="btn-reset">Ï¥àÍ∏∞Ìôî</button>
            </div>
            <div class="summary" id="summary"></div>
        </div>
        <div class="table-container">
            <table class="result-table">
                <thead>
                <tr>
                    <th>ÏÉÅÌÉú</th>
                    <th>ÌôòÏ†ÑÍ∏àÏï°</th>
                    <th>ÌôòÏ†ÑÎÇ†Ïßú</th>
                    <th>ÏàúÏù¥Ïùµ</th>
                    <th>ÏÉÅÏÑ∏</th>
                </tr>
                </thead>
                <tbody id="record-list"></tbody>
            </table>
        </div>
    </div>
</main>

<div id="login-modal" class="modal-overlay">
    <div class="modal-content">
        <button id="modal-close-btn" onclick="closeLoginModal()">√ó</button>
        <h3>Î°úÍ∑∏Ïù∏ / ÌöåÏõêÍ∞ÄÏûÖ</h3>
        <input class="modal-input" type="email" id="modal-email" placeholder="Ïù¥Î©îÏùº">
        <input class="modal-input" type="password" id="modal-password" placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏ (6ÏûêÎ¶¨ Ïù¥ÏÉÅ)">
        <div id="modal-error"></div>
        <div class="modal-buttons">
            <button id="modal-signup-btn">ÌöåÏõêÍ∞ÄÏûÖ</button>
            <button id="modal-login-btn">Î°úÍ∑∏Ïù∏</button>
        </div>
    </div>
</div>

<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>

<script>
    // üëáüëá Ïó¨Í∏∞Ïóê ÎãπÏã†Ïùò Firebase ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï Í∞íÏùÑ Î≥µÏÇ¨-Î∂ôÏó¨ÎÑ£Í∏∞ ÌïòÏÑ∏Ïöî! üëáüëá
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_AUTH_DOMAIN",
      projectId: "YOUR_PROJECT_ID",
      storageBucket: "YOUR_STORAGE_BUCKET",
      messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
      appId: "YOUR_APP_ID"
    };
    // Firebase Ï¥àÍ∏∞Ìôî
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    // --- Ï†ÑÏó≠ Î≥ÄÏàò ---
    let records = [];
    let currentTab = 'all';
    let currentUser = null;

    // --- Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò ---
    const getEl = (id) => document.getElementById(id);
    function today() { return new Date().toISOString().slice(0, 10); }
    function numberFormat(n) { return Math.round(n).toLocaleString('ko-KR'); }

    // --- üëá Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•/Î∂àÎü¨Ïò§Í∏∞ Î°úÏßÅÏùÑ FirestoreÎ°ú Î≥ÄÍ≤Ω ---
    async function saveToFirestore() {
      if (!currentUser) return; // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä ÏïÑÎãàÎ©¥ Ï†ÄÏû• Ïïà Ìï®
      records.forEach((r, index) => {
          if (!r.id) r.id = `record_${Date.now()}_${index}`;
      });
      try {
        // 'diaries' Ïª¨Î†âÏÖòÏóê Ïú†Ï†ÄÏùò Í≥†Ïú† ID(uid)Î°ú Î¨∏ÏÑúÎ•º ÎßåÎì§Í≥† records Î∞∞Ïó¥ÏùÑ ÌÜµÏß∏Î°ú Ï†ÄÏû•
        await db.collection('diaries').doc(currentUser.uid).set({ records: records });
      } catch (error) {
        console.error("Firestore Ï†ÄÏû• Ïò§Î•ò: ", error);
        alert("Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
      }
    }

    async function loadFromFirestore() {
      if (!currentUser) return; // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä ÏïÑÎãàÎ©¥ Î∂àÎü¨Ïò§ÏßÄ ÏïäÏùå
      try {
        const doc = await db.collection('diaries').doc(currentUser.uid).get();
        if (doc.exists) {
          records = doc.data().records || [];
          let needsSave = false;
          records.forEach((r, index) => {
              if (!r.id) {
                  r.id = `record_${Date.now()}_${index}`;
                  needsSave = true;
              }
          });
          if (needsSave) await saveToFirestore();
        } else {
          records = []; // Ïù¥ Ïú†Ï†ÄÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥Î°ú ÏãúÏûë
        }
      } catch (error) {
        console.error("Firestore Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò: ", error);
        alert("Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        records = [];
      }
    }

    // --- üëá Í∏∞Ï°¥ Ìï®ÏàòÎì§ÏóêÏÑú saveStorage()Î•º saveToFirestore()Î°ú Î≥ÄÍ≤Ω ---
    async function addRow() {
      // ... (Í∏∞Ï°¥ addRow Î°úÏßÅÍ≥º ÎèôÏùº)
      if (getEl('money').value === '' || getEl('rate_in').value === '') return alert("ÌôòÏ†ÑÍ∏àÏï°Í≥º ÌôòÏ†ÑÌôòÏú®ÏùÑ Ï±ÑÏõåÏ£ºÏÑ∏Ïöî!");
      records.unshift({
        money: Number(getEl('money').value),
        rate_in: Number(getEl('rate_in').value),
        interest: Number(getEl('interest').value) || 0,
        date_in: getEl('date_in').value || today(),
        id: 'record_' + Date.now(),
        isDetailVisible: false,
        partial_exchanges: []
      });
      await saveToFirestore(); // Î≥ÄÍ≤ΩÎêú Î∂ÄÎ∂Ñ
      renderTable();
      getEl('money').value = ''; getEl('rate_in').value = ''; getEl('interest').value = ''; getEl('date_in').value = today();
    }

    async function delRow(recordId) {
      if (confirm("Ï†ïÎßê Ïù¥ Ìï≠Î™©ÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†Ïñ¥Ïöî?")) {
        records = records.filter(r => r.id !== recordId);
        await saveToFirestore(); // Î≥ÄÍ≤ΩÎêú Î∂ÄÎ∂Ñ
        renderTable();
      }
    }
    
    async function addPartialExchange(recordId) {
      // ... (Í∏∞Ï°¥ Î°úÏßÅÍ≥º Í±∞Ïùò ÎèôÏùº)
      const record = records.find(r => r.id === recordId); if (!record) return;
      const amount = Number(getEl(`partial_amount_${record.id}`).value);
      const rate_out = Number(getEl(`partial_rate_out_${record.id}`).value);
      if (!amount || !rate_out) return alert("Í∏àÏï°/ÌôòÏú® ÏûÖÎ†•ÌïòÏÑ∏Ïöî!");
      const currentPaid = record.partial_exchanges.reduce((sum, p) => sum + p.amount, 0);
      if (currentPaid + amount > record.money + 1) return alert("Ï†ÑÏ≤¥ ÌôòÏ†ÑÍ∏àÏï° Ï¥àÍ≥º!");
      
      record.partial_exchanges.push({ amount, rate_out, date_out: getEl(`partial_date_out_${record.id}`).value || today(), fee: Number(getEl(`partial_fee_${record.id}`).value) || 0, id: 'p_' + Date.now() });
      record.partial_exchanges.sort((a, b) => new Date(a.date_out) - new Date(b.date_out));
      
      await saveToFirestore(); // Î≥ÄÍ≤ΩÎêú Î∂ÄÎ∂Ñ
      renderTable();
    }
    
    async function delPartial(recordId, partialId) {
      const record = records.find(r => r.id === recordId);
      if (record) {
        record.partial_exchanges = record.partial_exchanges.filter(p => p.id !== partialId);
        await saveToFirestore(); // Î≥ÄÍ≤ΩÎêú Î∂ÄÎ∂Ñ
        renderTable();
      }
    }
    
    async function updatePartialFee(recordId, partialId, newFee) {
        const record = records.find(r => r.id === recordId);
        if (record) {
            const partial = record.partial_exchanges.find(p => p.id === partialId);
            if (partial) partial.fee = Number(newFee);
            await saveToFirestore(); // Î≥ÄÍ≤ΩÎêú Î∂ÄÎ∂Ñ
            renderTable();
        }
    }
    
    // toggleDetailÏùÄ ÌôîÎ©¥ ÌëúÏãúÎßå Î∞îÍæ∏ÎØÄÎ°ú async/await Î∂àÌïÑÏöî
    function toggleDetail(recordId) {
        const record = records.find(r => r.id === recordId);
        if (record) {
          record.isDetailVisible = !record.isDetailVisible;
          renderTable();
        }
    }
    
    // --- UI Î†åÎçîÎßÅ Î∞è Í∏∞ÌÉÄ Ìï®ÏàòÎì§ (Í∏∞Ï°¥Í≥º Í±∞Ïùò ÎèôÏùº) ---
    function renderTable() {
      // ... (Í∏∞Ï°¥ renderTable Î°úÏßÅÏùÄ Î≥ÄÍ≤Ω ÏóÜÏùå)
      let baseRecords = [...records];
      baseRecords.sort((a, b) => new Date(b.date_in) - new Date(a.date_in));

      let filteredRecords = baseRecords;
      if (currentTab === 'ing') {
        filteredRecords = baseRecords.filter(r => r.partial_exchanges.reduce((a,p)=>a+p.amount,0) < r.money);
      } else if (currentTab === 'done') {
        filteredRecords = baseRecords.filter(r => r.partial_exchanges.reduce((a,p)=>a+p.amount,0) >= r.money);
      }

      const startDateVal = getEl('start-date').value;
      const endDateVal = getEl('end-date').value;
      if(startDateVal && endDateVal) {
        const start = new Date(startDateVal); const end = new Date(endDateVal); end.setHours(23, 59, 59, 999);
        filteredRecords = filteredRecords.filter(r => { const d = new Date(r.date_in); return d >= start && d <= end; });
      }

      const recordList = getEl('record-list');
      recordList.innerHTML = "";
      let totalNetProfit = 0;

      if (filteredRecords.length === 0) {
        recordList.innerHTML = "<tr><td colspan='5' style='text-align:center; color: #8B95A1; padding: 40px;'>Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏ ÌõÑ Í∏∞Î°ùÏùÑ Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî.</td></tr>";
      }

      filteredRecords.forEach(rec => {
        const paidSum = rec.partial_exchanges.reduce((a,p)=>a+p.amount,0);
        const isDone = paidSum >= rec.money;
        let fx_profit_total = 0;
        rec.partial_exchanges.forEach(p => { if (p.rate_out > 0) fx_profit_total += (p.amount - (p.amount / p.rate_out * rec.rate_in)); });
        const total_fee = rec.partial_exchanges.reduce((s, p) => s + (p.fee || 0), 0);
        let d1 = new Date(rec.date_in);
        let d2 = rec.partial_exchanges.length ? new Date(rec.partial_exchanges[rec.partial_exchanges.length-1].date_out) : new Date();
        const days = isDone ? Math.max(0, Math.round((d2 - d1)/(1000*60*60*24))) : '-';
        const int_fee = isDone ? (rec.money * rec.interest / 100 * days / 365) : 0;
        const net_profit = fx_profit_total - int_fee - total_fee;
        if (isDone) totalNetProfit += net_profit;
        const profitClass = !isDone ? 'profit-neutral' : (net_profit >= 0 ? 'profit-plus' : 'profit-minus');
        const row = recordList.insertRow();
        row.innerHTML = `<td><span class="status ${isDone ? 'status-done' : 'status-ing'}">${isDone ? 'ÏôÑÎ£å' : 'ÏßÑÌñâÏ§ë'}</span></td><td>${numberFormat(rec.money)}Ïõê</td><td>${rec.date_in.substring(5)}</td><td><b class="${profitClass}">${isDone ? (net_profit >= 0 ? '+' : '') + numberFormat(net_profit) + 'Ïõê' : '-'}</b></td><td><button class="btn-sm btn-detail" onclick="toggleDetail('${rec.id}')">${rec.isDetailVisible ? '‚ñ≤ Îã´Í∏∞' : '‚ñº ÏÉÅÏÑ∏'}</button></td>`;
        if (rec.isDetailVisible) {
          const detailRow = recordList.insertRow(); detailRow.insertCell().colSpan = 5;
          detailRow.cells[0].className = 'details-content show';
          detailRow.cells[0].innerHTML = `<div class="detail-grid"><strong>ÌôòÏ†ÑÌôòÏú®</strong><span>${rec.rate_in}</span><strong>ÌôòÏ†ÑÍ∏àÏï°($)</strong><span>${(rec.money/rec.rate_in).toFixed(2)}$</span><strong>Ïù¥ÏûêÏú®</strong><span>${rec.interest}%</span><strong>Í≤ΩÍ≥ºÏùºÏàò</strong><span>${days}Ïùº</span><strong>Ïù¥ÏûêÎπÑÏö©</strong><span>${numberFormat(int_fee)}Ïõê</span><strong>ÏàòÏàòÎ£åÌï©Í≥Ñ</strong><span>${numberFormat(total_fee)}Ïõê</span></div><div class="sub-table"><table><thead><tr><th>#</th><th>ÎÇ†Ïßú</th><th>Í∏àÏï°</th><th>ÌôòÏú®</th><th>ÏàòÏàòÎ£å</th><th>ÏÇ≠Ï†ú</th></tr></thead><tbody>${rec.partial_exchanges.map((p, idx) => `<tr><td>${idx+1}</td><td>${p.date_out}</td><td>${numberFormat(p.amount)}</td><td>${p.rate_out}</td><td><input type="number" value="${p.fee || 0}" onchange="updatePartialFee('${rec.id}', '${p.id}', this.value)"></td><td><button class="del-partial-btn" onclick="delPartial('${rec.id}', '${p.id}')">‚ùå</button></td></tr>`).join('')}<tr class="add-row"><td></td><td><input type="date" id="partial_date_out_${rec.id}" value="${today()}"></td><td><input type="number" id="partial_amount_${rec.id}" placeholder="Í∏àÏï°"></td><td><input type="number" id="partial_rate_out_${rec.id}" placeholder="ÌôòÏú®"></td><td><input type="number" id="partial_fee_${rec.id}" placeholder="ÏàòÏàòÎ£å" value="0"></td><td><button class="add-partial-btn" onclick="addPartialExchange('${rec.id}')">Ï∂îÍ∞Ä</button></td></tr></tbody></table></div><button class="btn-delete" onclick="delRow('${rec.id}')">Ïù¥ Í∏∞Î°ù ÏÇ≠Ï†úÌïòÍ∏∞</button>`;
        }
      });
      const profitColor = totalNetProfit >= 0 ? 'var(--danger-color)' : 'var(--primary-color)';
      getEl('summary').innerHTML = `Ï¥ù <b>${filteredRecords.length}</b>Í±¥, ÏôÑÎ£å Í±¥ ÏàúÏù¥Ïùµ Ìï©Í≥Ñ: <b style="color:${profitColor}">${numberFormat(totalNetProfit)}Ïõê</b>`;
    }

    function showTab(tab) {
        currentTab = tab;
        document.querySelectorAll('.tab-section button').forEach(b => {
            b.classList.remove('active');
            if(b.textContent.includes(tab) || (tab==='all' && b.textContent==='Ï†ÑÏ≤¥')) {
                b.classList.add('active');
            }
        });
        renderTable();
    }
    
    function resetDateFilter(){ getEl('start-date').value = ''; getEl('end-date').value = ''; renderTable(); }

    // export, import Ìï®ÏàòÎäî Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ (FirestoreÏôÄ Ïó∞ÎèôÎêòÎèÑÎ°ù ÏàòÏ†ï)
    function exportData() {
        if(records.length === 0) return alert("ÎÇ¥Î≥¥ÎÇº Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥Ïöî!");
        const dataStr = JSON.stringify(records, null, 2);
        const blob = new Blob([dataStr], {type:"application/json"});
        const a = document.createElement('a'); a.href = URL.createObjectURL(blob);
        const dt = new Date(); a.download = `fx_diary_backup_${dt.getFullYear()}${String(dt.getMonth()+1).padStart(2,"0")}${String(dt.getDate()).padStart(2,"0")}.json`;
        a.click(); URL.revokeObjectURL(a.href);
    }
    function exportCSV() {
      //... (Í∏∞Ï°¥ exportCSV Î°úÏßÅÏùÄ Î≥ÄÍ≤Ω ÏóÜÏùå)
      if(records.length === 0) return alert("ÎÇ¥Î≥¥ÎÇº Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥Ïöî!");
      let csvContent = "ÌôòÏ†ÑÎÇ†Ïßú,ÏµúÏ¥àÌôòÏ†ÑÏï°(Ïõê),ÏµúÏ¥àÌôòÏú®,Ïù¥ÏûêÏú®(%),ÏÉÅÌÉú,Î∂ÄÎ∂ÑÌôòÏ†ÑÏùº,Î∂ÄÎ∂ÑÌôòÏ†ÑÏï°(Ïõê),Î∂ÄÎ∂ÑÌôòÏ†ÑÌôòÏú®,Í∞úÎ≥ÑÏàòÏàòÎ£å(Ïõê)\n";
      records.forEach(rec => { const paidSum = (rec.partial_exchanges||[]).reduce((a,p)=>a+p.amount,0); const done = paidSum >= rec.money; const status = done ? "ÏôÑÎ£å" : "ÏßÑÌñâÏ§ë"; if (rec.partial_exchanges.length === 0) { csvContent += `${rec.date_in},${rec.money},${rec.rate_in},${rec.interest},${status},,,, \n`; } else { rec.partial_exchanges.forEach(p => { csvContent += `${rec.date_in},${rec.money},${rec.rate_in},${rec.interest},${status},${p.date_out},${p.amount},${p.rate_out},${p.fee||0}\n`; }); } });
      const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' });
      const a = document.createElement('a'); a.href = URL.createObjectURL(blob);
      const dt = new Date(); a.download = `fx_diary_export_${dt.getFullYear()}${String(dt.getMonth()+1).padStart(2,"0")}${String(dt.getDate()).padStart(2,"0")}.csv`;
      a.click(); URL.revokeObjectURL(a.href);
    }
    async function importData(e) {
      const file = e.target.files[0]; if (!file) return;
      const reader = new FileReader();
      reader.onload = async function(evt) {
        try {
          const imported = JSON.parse(evt.target.result);
          if (Array.isArray(imported)) {
            if(!confirm("Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Í∞Ä Î™®Îëê ÏÇ¨ÎùºÏßÄÍ≥† ÏÉàÎ°ú Î∂àÎü¨Ïò® Îç∞Ïù¥ÌÑ∞Î°ú ÎçÆÏñ¥ÏîåÏõåÏ†∏Ïöî. Ï†ïÎßê ÏßÑÌñâÌï†ÍπåÏöî?")) { e.target.value = ""; return; }
            records = imported;
            await saveToFirestore(); // FirestoreÏóê Ï†ÄÏû•
            showTab('all');
            alert("Î∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å!");
          } else { alert("ÏûòÎ™ªÎêú ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§."); }
        } catch (err) { alert("Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò: " + err.message); }
      }
      reader.readAsText(file); e.target.value = "";
    }

    // --- üëá Î°úÍ∑∏Ïù∏ Í¥ÄÎ†® ÏÉà Ìï®ÏàòÎì§ ---
    function openLoginModal() { getEl('login-modal').style.display = 'flex'; }
    function closeLoginModal() { getEl('login-modal').style.display = 'none'; getEl('modal-error').textContent = ''; }
    
    // --- ÌéòÏù¥ÏßÄ Î°úÎìú Î∞è Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎ≥ÄÌôî Í∞êÏßÄ ---
    document.addEventListener('DOMContentLoaded', () => {
      const loginBtn = getEl('login-btn');
      const logoutBtn = getEl('logout-btn');
      const userInfo = getEl('user-info');
      const userEmail = getEl('user-email');
      const appContent = getEl('app-content');

      const modalLoginBtn = getEl('modal-login-btn');
      const modalSignupBtn = getEl('modal-signup-btn');
      const modalEmailInput = getEl('modal-email');
      const modalPasswordInput = getEl('modal-password');
      const modalError = getEl('modal-error');
      
      // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Í∞êÏßÄ (ÌïµÏã¨!)
      auth.onAuthStateChanged(async (user) => {
        if (user) { // Î°úÍ∑∏Ïù∏ ÎêòÏóàÏùÑ Îïå
          currentUser = user;
          loginBtn.style.display = 'none';
          userInfo.style.display = 'flex';
          userEmail.textContent = user.email;
          appContent.style.display = 'block';

          await loadFromFirestore(); // Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
          getEl('date_in').value = today();
          renderTable();

        } else { // Î°úÍ∑∏ÏïÑÏõÉ ÎêòÏóàÏùÑ Îïå
          currentUser = null;
          loginBtn.style.display = 'block';
          userInfo.style.display = 'none';
          userEmail.textContent = '';
          appContent.style.display = 'none';
          records = []; // Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
          renderTable(); // Îπà ÌÖåÏù¥Î∏î Í∑∏Î¶¨Í∏∞
        }
      });

      // Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº
      logoutBtn.addEventListener('click', () => auth.signOut());
      
      // Î™®Îã¨Ïùò Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
      modalLoginBtn.addEventListener('click', () => {
        const email = modalEmailInput.value;
        const password = modalPasswordInput.value;
        auth.signInWithEmailAndPassword(email, password)
          .then(() => closeLoginModal())
          .catch(error => modalError.textContent = error.message);
      });

      // Î™®Îã¨Ïùò ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäº
      modalSignupBtn.addEventListener('click', () => {
        const email = modalEmailInput.value;
        const password = modalPasswordInput.value;
        auth.createUserWithEmailAndPassword(email, password)
          .then(() => {
             modalError.textContent = "ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ! Ïù¥Ï†ú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.";
          })
          .catch(error => modalError.textContent = error.message);
      });
    });
</script>
</body>
</html>
